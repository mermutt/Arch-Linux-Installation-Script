- block:
  - name: "Check for ADM CPU"
    lineinfile:
      path: /proc/cpuinfo
      regexp: '.*AMD.*'
      state: absent
    check_mode: yes
    register: amd_cpu

  - name: "Check for Intel CPU"
    lineinfile:
      path: /proc/cpuinfo
      regexp: '.*Intel.*'
      state: absent
    check_mode: yes
    register: intel_cpu

  - name: "Set fact has_amd_cpu"
    set_fact:
      has_amd_cpu: "{{ amd_cpu.found > 0 }}"

  - name: "Set fact has_intel_cpu"
    set_fact:
      has_intel_cpu: "{{ intel_cpu.found > 0 }}"

  - name: "Show has_intel_cpu fact"
    debug:
      var: has_intel_cpu

  - name: "Show has_amd_cpu fact"
    debug:
      var: has_amd_cpu


- block:
  # superuser
  # when: create_ext4_data_partition

  - name: "Create data partition on {{ install_device }}"
    community.general.parted:
      device: "/dev/{{ install_device }}"
      name: "{{ part_label_data }}"
      label: gpt
      number: 3
      part_type: primary
      state: present
      part_start: "{{ root_partition_end }}"
      part_end: "100%"
    when: install_device == data_device

  - block:

    - name: "Ensure to delete existing luks container from previous setup"
      shell:
        cmd: cryptsetup erase -q /dev/{{ data_device }}1
      ignore_errors: true
      failed_when: false

    - name: "Delete exising partitions on /dev/{{ data_device }}"
      command: "wipefs --force --quiet --all /dev/{{ data_device }}"

    - name: "Create data partition on {{ data_device }}"
      community.general.parted:
        device: "/dev/{{ data_device }}"
        name: "{{ part_label_data }}"
        label: gpt
        number: 1
        part_type: primary
        state: present
        part_start: 1MiB
        part_end: "100%"

    when: install_device != data_device

  - name: "Ensure to recreate LUKS container {{ crypt_label_data }}"
    community.crypto.luks_device:
      device: "/dev/disk/by-partlabel/{{ part_label_data }}"
      state: "absent"
      name: "{{ crypt_label_data }}"
    ignore_errors: true
    when: enable_encryption

  - name: "Create LUKS container {{ crypt_label_data }} for {{ part_label_data }}"
    community.crypto.luks_device:
      device: "/dev/disk/by-partlabel/{{ part_label_data }}"
      state: "opened"
      name: "{{ crypt_label_data }}"
      passphrase: "{{ luks_passphrase }}"
      hash: "sha512"
      type: luks1
      pbkdf:
        iteration_count: "{{ luks_pbkdf_iterations }}"
    when: enable_encryption

  - name: "Add Keyfile to LUKS container {{ crypt_label_data }}"
    community.crypto.luks_device:
      device: "/dev/disk/by-partlabel/{{ part_label_data }}"
      state: "opened"
      passphrase: "{{ luks_passphrase }}"
      new_keyfile: "{{ install_path}}{{ luks_keyfile }}"
    when: enable_encryption

  # longhorn reuires a ext4 filesystem (btrfs is currently not supported)
  - name: "Create ext4 Filesystem"
    community.general.filesystem:
      fstype: ext4
      dev: "/dev/mapper/{{ crypt_label_data }}"
      opts: "-L {{ ext4_label_data }}"
      force: true
    when: enable_encryption

  - name: "Create ext4 Filesystem"
    community.general.filesystem:
      fstype: ext4
      dev: "/dev/{{ install_device }}3"
      opts: "-L {{ ext4_label_data }}"
      force: true
    when: not enable_encryption

  become: true
  when: create_ext4_data_partition


- block:
  # superuser
  # when: tmpfs_root

  - name: "Create tmpfs NixOS directories"
    file:
      path: "{{ item }}"
      state: 'directory'
      mode: 0755
    with_items:
      - "{{ install_path }}/nix/persistent"
      - "{{ install_path }}/nix/persistent/etc"
      - "{{ install_path }}/nix/persistent/etc/nixos"
      - "{{ install_path }}/nix/persistent/etc/ssh"
      - "{{ install_path }}/etc"
      - "{{ install_path }}/etc/nixos"

  - name: "Bind mount /nix/persistent/etc/nixos -> /etc/nixos"
    mount:
      path: "{{ install_path }}/etc/nixos"
      src: "{{ install_path }}/nix/persistent/etc/nixos"
      fstype: none
      opts: 'bind'
      state: "mounted"
      fstab: /tmp/tmp.fstab

  become: true
  when: tmpfs_root


- block:
  # superuser

  - name: "Create NixOS directories"
    file:
      path: "{{ item }}"
      state: 'directory'
      mode: 0755
    with_items:
      - "{{ install_path }}/etc"
      - "{{ install_path }}/etc/nixos"

  become: true


- block:
  # superuser

  - name: "Create NixOS hardware-config for normal setup"
    template:
      src: hardware-configuration.nix.j2
      dest: "{{ install_path }}/etc/nixos/hardware-configuration.nix"
      owner: root
      group: root
      mode: 0755
    when: not enable_encryption

  - name: "Create NixOS hardware-config for encrypted setup"
    template:
      src: hardware-configuration.encrypted.nix.j2
      dest: "{{ install_path }}/etc/nixos/hardware-configuration.nix"
      owner: root
      group: root
      mode: 0755
    when: enable_encryption

  - name: "Create NixOS minimal config"
    template:
      src: configuration.nix.j2
      dest: "{{ install_path }}/etc/nixos/configuration.nix"
      owner: root
      group: root
      mode: 0755

  become: true


- block:
  # superuser

  - name: "Install NixOS"
    shell:
      cmd: nixos-install --no-root-passwd --root {{ install_path }}
      chdir: "{{ install_path }}"

  become: true

