- name: "Get /dev/disk/by-partlabel/{{ part_label_boot }} UUID"
  shell:
    cmd: "blkid /dev/disk/by-partlabel/{{ part_label_boot }} -s UUID -o value"
  register: boot_uuid_info

- name: "Create var boot_uuid"
  set_fact:
    boot_uuid: "{{ boot_uuid_info.stdout }}"

- name: "Get /dev/disk/by-partlabel/{{ part_label_root }} UUID"
  shell:
    cmd: "blkid /dev/disk/by-partlabel/{{ part_label_root }} -s UUID -o value"
  register: crypt_root_uuid_info

- name: "Create var crypt_root_uuid"
  set_fact:
    crypt_root_uuid: "{{ crypt_root_uuid_info.stdout }}"

- name: "Get /dev/mapper/{{ crypt_dev_label }} UUID"
  shell:
    cmd: "blkid /dev/mapper/{{ crypt_dev_label }} -s UUID -o value"
  register: btrfs_root_uuid_info

- name: "Create var btrfs_root_uuid"
  set_fact:
    btrfs_root_uuid: "{{ btrfs_root_uuid_info.stdout }}"

- name: "Show crypt_root_uuid"
  debug:
    var: crypt_root_uuid

- name: "Show boot_uuid"
  debug:
    var: boot_uuid

- name: "Show btrfs_root_uuid"
  debug:
    var: btrfs_root_uuid

- name: "Check for ADM CPU"
  lineinfile:
    path: /proc/cpuinfo
    regexp: '.*AMD.*'
    state: absent
  check_mode: yes
  register: amd_cpu

- name: "Check for Intel CPU"
  lineinfile:
    path: /proc/cpuinfo
    regexp: '.*Intel.*'
    state: absent
  check_mode: yes
  register: intel_cpu

- name: "Set fact has_amd_cpu"
  set_fact:
    has_amd_cpu: "{{ amd_cpu.found }}"

- name: "Set fact has_intel_cpu"
  set_fact:
    has_intel_cpu: "{{ intel_cpu.found }}"

- name: "Show has_intel_cpu fact"
  debug:
    var: has_intel_cpu

- name: "Show has_amd_cpu fact"
  debug:
    var: has_amd_cpu

- block:
  # superuser

  - name: "Create /etc/nixos"
    file:
      path: "{{ install_path }}/etc/nixos"
      state: 'directory'
      mode: 0755

  - name: "Create /etc/nixos/config"
    file:
      path: "{{ install_path }}/etc/nixos/config"
      state: 'directory'
      mode: 0755

  - name: "Create /etc/secrets/initrd"
    file:
      path: "{{ install_path }}/etc/secrets/initrd"
      state: 'directory'
      mode: 0755

  - name: "Copy disk key"
    copy:
      src: "{{ install_path }}{{ luks_keyfile }}"
      dest: "{{ install_path }}/etc/secrets/initrd{{ luks_keyfile }}"
      owner: root
      group: root
      mode: '0000'
      remote_src: yes

  - name: "Create NixOS hardware-config"
    template:
      src: hardware-configuration.nix.j2
      dest: "{{ install_path }}/etc/nixos/hardware-configuration.nix"
      owner: root
      group: root
      mode: 0755

  - name: "Create NixOS config entrypoint"
    template:
      src: configuration.nix.j2
      dest: "{{ install_path }}/etc/nixos/configuration.nix"
      owner: root
      group: root
      mode: 0755

  - name: "Create NixOS minimal config"
    template:
      src: config/configuration.nix.j2
      dest: "{{ install_path }}/etc/nixos/config/configuration.nix"
      owner: root
      group: root
      mode: 0755

  - name: "Install NixOS"
    shell:
      cmd: nixos-install --root {{ install_path }}
      chdir: "{{ install_path }}"

  become: true

